UI管理器框架在我之前的博客上有讲https://blog.csdn.net/qq_62947569/article/details/130773177

UI管理器的效果就是可以直接调用UIManager中的方法控制UI面板的显示与隐藏等，不用谢大量的代码来控制每一个UI面板
  实现原理：1.每个面板制作好后，都放在Resources文件中做成预制件
	   2.每个面板都继承自面板基类，基类有四个面板周期函数
	   3.有两个字典，一个字典存放面板码和对应的路径，另一个字典存放面板码和对应的脚本（这里用面板脚本表示脚本的实例化对象，因为获取到实例化对象后还是要获取到该对象身上的脚本，因为每个面板对应不同的脚本，脚本中就有不同的方法）
	   4.用栈来存放面板，显示在栈里面的面板，只可以操作栈顶面板


UIManager为UI管理器，用来显示隐藏UI面板--Framework
BasePanel为面板的基类，其中有四个面板的生命周期函数--Framework
UIPanelInfo为解析json文件用来接收的类，其中涉及到字符串转枚举或者int转枚举（内容可能会有变化，但是这个类是框架的一部分）--Framework
UIPanelType为页面码，它是枚举类型，不同面板对应不同页面码（内容可能会有变化，但是这个类是框架的一部分）--Framework
UIPanelType(Rescouces文件夹中的),这是一个json文件，用来存放面板的页面码和路径(页面码用的int，没用字符串)内容可能会有变化，但是这个类是框架的一部分）--Framework
UIPanelOne~UIPanelThree为每个面板的脚本，这里需要重写基类中的面板生命周期函数，根据面板的功能需求定义
Test9位测试UI面板的代码
注意：1.每个面板需要制作成预制件放在Resources文件夹中
     2.这里还用到了LitJson插件，用来将josn解析成list或者数组（因为jsonutility不能解析成数组货list）

该UI管理器是优化了之前的一些管理方法
    自动实现生成Canvas画布，之前需要手动创建（为了保证切换场景UI不销毁，因此将该画布添加到UI管理器(不销毁的单例)的对象上）
还没优化的点：
    1.采用的Resourse加载，这就需要把场景放在Resources包中，应该采用AB包进行加载，方便后续更新


