事件管理中心我在之前的CSDN博客上有讲过，事件的监听和广播https://blog.csdn.net/qq_62947569/article/details/130544515

作用：最大的作用就是降低两个脚本之间的耦合度，也就是一个脚本访问另一个脚本时，不是直接访问，而是通过发送命令，让监听了这个命令的脚本去执行
形象比喻就是脚本A,B,C；如果脚本A想访问脚本B中的函数，可以通过让脚本C去访问脚本B的函数，这个脚本C就是专门用来监听大家的函数的，为大家提供服务

原理：
1.让脚本向事件中心添加事件，监听对应的命令
2.广播命令，事件中心就会通知这条监听命令的脚本，让其执行对应的逻辑

注意：
我之前写的事件的监听和广播代码没有将管理器写成单例模式，全用的静态方法，这样的话会导致所有静态方法在程序一运行时全部加载到了内存中，对性能不是太友好

疑惑1：对于同一个事件名，比如游戏结束，现在我想要广播游戏结束的事件，需要执行一系列方法，可是该事件对应了不同的委托参数个数和类型不同应该怎么解决
疑惑2：比如只有一个参数的委托，有多播委托，参数类型和个数一样，但是在广播时传入参数的值不一样，怎么解决
	这里我能想到的解决办法就是再多加一层封装即可，比如游戏结束的事件码GameOver，它可能需要执行一系列的方法，比如关闭玩家输入方法，关闭怪物移动的方法等等，这些方法
	如果对应不同的委托类型的话就不能用单一的事件码GameOver对这一系列方法进行绑定，就需要为该事件定义自己的事件码，比如GameOverClosePlayerInput该事件码就可以对应
	游戏结束关闭玩家输入的事件，随后将这些需要执行的方法都在一个统一的Gameover方法中进行广播，最后将事件码GameOver和GameOver方法进行绑定广播即可
	疑惑2同理可解决
因此这里在使用事件中心时一定要注意事件码和事件在进行绑定时首先确定是否要执行一系列事件，如果要执行一系列事件考虑1.事件的类型是统一，2.事件的参数值是否可以共用一个如果不满足那么参考上方的解决办法

（合并不同类型的委托成一个多播委托是合法的，但可能会在运行时引发问题，因为不同类型的委托可能需要不同的参数。在实际编程中，需要确保在多播委托中包含相同类型的委托，以避免潜在的问题。）
（多个参数除了重复写添加移除方法等，还可以使用一个专门的类来储存一些参数，随后将该类当做形参传入一个参数类型的委托即可）

1.EventDefine类，这个类是枚举类型，可以理解为里面存放的是事件的名称，事件码--Framework
2.CallBack类，这个类里面存放的全是不同参数的委托类型--Framework
3.EventCenterManager类，事件管理中心，负责添加，移除，广播监听--Framework